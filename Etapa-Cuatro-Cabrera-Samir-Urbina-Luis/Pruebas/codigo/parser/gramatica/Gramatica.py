"""
Compilador Notch Engine

Estudiantes: Cabrera Samir y Urbina Luis

Archivo: Gramatica.py

Breve Descripcion: Archivo principal de gramatica generado por GikGram, traducido
por los estudiantes.
"""

from .GTablaParsing import GTablaParsing
from .GLadosDerechos import GLadosDerechos
from .GNombresTerminales import GNombresTerminales


class Gramatica:
    """
    Esta clase contiene:
    - Constantes necesarias para el driver de parsing
    - Constantes con las rutinas sem√°nticas
    - Y los m√©todos necesarios para el driver de parsing
    """
    
    # Constante que contiene el c√≥digo de familia del terminal de fin de archivo
    MARCA_DERECHA = 133

    # Constante que contiene el n√∫mero del no-terminal inicial
    NO_TERMINAL_INICIAL = 134

    # Constante que contiene el n√∫mero m√°ximo de columnas que tiene los lados derechos
    MAX_LADO_DER = 9

    # Constante que contiene el n√∫mero m√°ximo de follows
    MAX_FOLLOWS = 48

    # üîß CORRECCI√ìN: Definir correctamente los rangos de s√≠mbolos sem√°nticos
    # Basado en los s√≠mbolos que aparecen en los logs (220, 222, 224, etc.)
    SIMBOLO_SEMANTICO_INICIAL = 212
    SIMBOLO_SEMANTICO_FINAL = 350  # Ajustar seg√∫n sea necesario

    # Constantes con las rutinas sem√°nticas
    # Mapeo de s√≠mbolos sem√°nticos identificados en los logs
    INIT_TSG = 220           # #init_tsg - Inicializar tabla de s√≠mbolos global
    FREE_TSG = 221           # #free_tsg - Liberar tabla de s√≠mbolos global
    CHECK_EXISTENCE = 222    # #chkExistencia - Verificar existencia de identificador
    CHECK_FUNC_START = 223   # #chk_func_start - Verificar inicio de funci√≥n
    CHECK_FUNC_RETURN = 224  # #chk_func_return - Verificar retorno de funci√≥n
    VAR_LIST_MORE = 228      # Manejo de m√°s variables en lista
    VAR_INIT = 229           # Inicializaci√≥n de variables
    LITERAL_INIT = 230       # Inicializaci√≥n con literal
    PARAM_MORE = 231         # M√°s par√°metros
    # ... Agregar m√°s seg√∫n aparezcan en los logs

    @staticmethod
    def esTerminal(numSimbolo):
        """
        M√©todo esTerminal
            Devuelve true si el s√≠mbolo es un terminal
            o false de lo contrario
        @param numSimbolo: N√∫mero de s√≠mbolo
        """
        return (0 <= numSimbolo <= 133)

    @staticmethod
    def esNoTerminal(numSimbolo):
        """
        M√©todo esNoTerminal
            Devuelve true si el s√≠mbolo es un no-terminal
            o false de lo contrario
        @param numSimbolo: N√∫mero de s√≠mbolo
        """
        return (134 <= numSimbolo <= 211)

    @staticmethod
    def esSimboloSemantico(numSimbolo):
        """
        üîß M√âTODO CORREGIDO
        M√©todo esSimboloSemantico
            Devuelve true si el s√≠mbolo es un s√≠mbolo sem√°ntico
            (incluyendo los s√≠mbolos de generaci√≥n de c√≥digo)
            o false de lo contrario
        @param numSimbolo: N√∫mero de s√≠mbolo
        """
        # CORRECCI√ìN: Rango v√°lido para s√≠mbolos sem√°nticos
        return (212 <= numSimbolo <= 350)  # ‚úÖ Rango matem√°ticamente v√°lido

    @staticmethod
    def obtenerNombreSimboloSemantico(numSimbolo):
        """
        üÜï NUEVO M√âTODO
        Obtiene el nombre descriptivo de un s√≠mbolo sem√°ntico
        @param numSimbolo: N√∫mero del s√≠mbolo sem√°ntico
        @return: Nombre del s√≠mbolo sem√°ntico o "DESCONOCIDO"
        """
        simbolos_semanticos = {
            220: "init_tsg",
            221: "free_tsg", 
            222: "chkExistencia",
            223: "chk_func_start",
            224: "chk_func_return",
            225: "literal_init",
            226: "var_more",
            227: "param_more",
            228: "var_list_more",
            229: "var_init",
            230: "literal_proc",
            231: "param_proc",
            # Agregar m√°s seg√∫n se identifiquen
        }
        
        return simbolos_semanticos.get(numSimbolo, f"SEMANTICO_{numSimbolo}")

    @staticmethod
    def diagnosticarSimbolo(numSimbolo):
        """
        üÜï NUEVO M√âTODO DE DIAGN√ìSTICO
        Diagnostica qu√© tipo de s√≠mbolo es y proporciona informaci√≥n √∫til
        @param numSimbolo: N√∫mero de s√≠mbolo a diagnosticar
        @return: String con informaci√≥n del s√≠mbolo
        """
        if Gramatica.esTerminal(numSimbolo):
            try:
                nombre = Gramatica.getNombresTerminales(numSimbolo)
                return f"TERMINAL: {nombre} ({numSimbolo})"
            except:
                return f"TERMINAL: T{numSimbolo} ({numSimbolo})"
        
        elif Gramatica.esNoTerminal(numSimbolo):
            indice = numSimbolo - Gramatica.NO_TERMINAL_INICIAL
            return f"NO_TERMINAL: NT{indice} ({numSimbolo})"
        
        elif Gramatica.esSimboloSemantico(numSimbolo):
            nombre = Gramatica.obtenerNombreSimboloSemantico(numSimbolo)
            return f"SIMBOLO_SEMANTICO: #{nombre} ({numSimbolo})"
        
        else:
            return f"DESCONOCIDO: {numSimbolo} - ¬°REVISAR RANGOS!"

    @staticmethod
    def getTablaParsing(numNoTerminal, numTerminal):
        """
        M√©todo getTablaParsing
            Devuelve el n√∫mero de regla contenida en la tabla de parsing
        @param numNoTerminal: N√∫mero del no-terminal
        @param numTerminal: N√∫mero del terminal
        """
        return GTablaParsing.getTablaParsing(numNoTerminal, numTerminal)

    @staticmethod
    def getLadosDerechos(numRegla, numColumna):
        """
        M√©todo getLadosDerechos
            Obtiene un s√≠mbolo del lado derecho de la regla
        @param numRegla: N√∫mero de regla
        @param numColumna: N√∫mero de columna
        """
        return GLadosDerechos.getLadosDerechos(numRegla, numColumna)

    @staticmethod
    def getNombresTerminales(numTerminal):
        """
        M√©todo getNombresTerminales
            Obtiene el nombre del terminal
        @param numTerminal: N√∫mero del terminal
        """
        return GNombresTerminales.getNombresTerminales(numTerminal)

    @staticmethod
    def getTablaFollows(numNoTerminal, numColumna):
        """
        M√©todo getTablaFollows
            Obtiene el n√∫mero de terminal del follow del no-terminal
        @param numNoTerminal: N√∫mero de no-terminal
        @param numColumna: N√∫mero de columna
        """
        from .GTablaFollows import GTablaFollows
        return GTablaFollows.getTablaFollows(numNoTerminal, numColumna)

    @staticmethod
    def verificarIntegridadRangos():
        """
        üÜï M√âTODO DE VERIFICACI√ìN
        Verifica que los rangos de s√≠mbolos est√©n correctamente definidos
        """
        print("=== VERIFICACI√ìN DE INTEGRIDAD DE RANGOS ===")
        print(f"Terminales: 0-{Gramatica.MARCA_DERECHA}")
        print(f"No-terminales: {Gramatica.NO_TERMINAL_INICIAL}-211")
        print(f"S√≠mbolos sem√°nticos: 212-{Gramatica.SIMBOLO_SEMANTICO_FINAL}")
        
        # Verificar que no hay solapamiento
        if Gramatica.MARCA_DERECHA >= Gramatica.NO_TERMINAL_INICIAL:
            print("‚ö†Ô∏è  ADVERTENCIA: Solapamiento entre terminales y no-terminales")
        
        if 211 >= 212:
            print("‚úÖ Sin solapamiento entre no-terminales y s√≠mbolos sem√°nticos")
        else:
            print("‚ö†Ô∏è  ADVERTENCIA: Gap entre no-terminales y s√≠mbolos sem√°nticos")
        
        print("===============================================")