$* 
  Prueba_Lim_TokensConsecutivos.ne
  Propósito: Verificar tokens sin separación (ej: 5+3) para probar la capacidad de reconocimiento del analizador léxico
  Fecha: 28/04/2025
*$

WorldName PruebaTokensConsecutivos:

Bedrock 
  $$ Constantes con valores que implican tokens consecutivos
  Obsidian Stack MAX_LEVEL5 100;
  Obsidian Stack LEVEL_PLUS_SKILL 200;
  Obsidian Stack OFFSET_MINUS_5 50;

Inventory 
  $$ Declaraciones con tokens consecutivos
  Stack a=5;
  Stack b=10;
  Stack c=a+b;

  $$ Operadores aritméticos sin espacios
  Stack suma=5+3;
  Stack resta=10-7;
  Stack multiplicacion=4*3;
  Stack division=20//4;
  Stack modulo=7%2;

  $$ Operadores de comparación sin espacios
  Torch comparacion1=5<10;
  Torch comparacion2=5>3;
  Torch comparacion3=5<=5;
  Torch comparacion4=5>=5;
  Torch comparacion5=5is5;
  Torch comparacion6=5isNot6;

  $$ Expresiones complejas sin espacios
  Stack expr1=5+3*2;
  Stack expr2=(5+3)*2;
  Stack expr3=5+(3*2);

  $$ Flotantes sin espacios en expresiones
  Ghast f1=3.14;
  Ghast f2=f1:+2.5;
  Ghast f3=f1:-1.5;
  Ghast f4=f1:*2.0;
  Ghast f5=f1://1.5;

  $$ Acceso a estructuras sin espacios
  Shelf[5] Stack arreglo;
  Entity Jugador
  PolloCrudo
    Spider nombre;
    Stack nivel;
  PolloAsado; 

  $$ Inicialización de variables con literales sin espacios
  Spider texto="Hola";
  Rune caracter='A';
  Torch booleano=On;
  Stack arr[0]=10;

  $$ Múltiples variables en una línea sin separación adecuada
  Stack x=1,y=2,z=3;

  $$ Variables normales para pruebas
  Stack normal1=10;
  Stack normal2=20;
  Spider mensaje="Tokens consecutivos";

SpawnPoint 
  PolloCrudo
    $$ Operaciones con tokens consecutivos
    suma=normal1+normal2;
    Stack valor=(normal1+5)*(normal2-5);

    $$ Estructuras de control con tokens consecutivos
    repeater suma>0 hit
    PolloCrudo
      suma=suma-1;
      dropperStack(suma);
    PolloAsado

    target valor>=100 hit
    PolloCrudo
      dropperSpider("Valor grande");
    PolloAsado
    miss
    PolloCrudo
      dropperSpider("Valor pequeño");
    PolloAsado

    $$ Llamadas a funciones sin espacios
    dropperSpider(mensaje);
    dropperStack(valor);

    $$ Operaciones consecutivas
    normal1+=5;
    normal2-=3;
    dropperStack(normal1);
    dropperStack(normal2);
  PolloAsado

worldSave