$* 
  Prueba_PR_Funciones.ne
  Propósito: Verificar palabras para funciones y procedimientos (Spell, Ritual, respawn, ender_pearl)
  Fecha: Abril 10, 2025
*$

$ Prueba de palabras reservadas para funciones y procedimientos en NotchEngine
$ Verificando: Spell, Ritual, respawn

WorldName PruebaFunciones:

$$ Sección de prototipos
Recipe {
    $$ Prototipos de funciones (Spell)
    Spell sumar(Stack :: a, b) -> Stack;
    Spell factorial(Stack :: n) -> Stack;
    Spell esPar(Stack :: numero) -> Torch;
    Spell sumarArreglo(Shelf[10] Stack :: numeros; Stack tamano) -> Stack;
    
    $$ Prototipos de procedimientos (Ritual)
    Ritual imprimirLinea(Spider :: texto);
    Ritual mostrarResultado(Spider :: operacion; Stack valor);
    Ritual imprimirArreglo(Shelf[10] Stack :: arr; Stack tamano);
}

$$ Sección de rutinas (implementación de funciones y procedimientos)
CraftingTable {
    $$ Funciones (Spell) con instrucción de retorno (respawn)
    Spell sumar(Stack :: a, b) -> Stack
    PolloCrudo
        $$ Retorno con expresión simple
        respawn a + b;
    PolloAsado
    
    Spell factorial(Stack :: n) -> Stack
    PolloCrudo
        $$ Retorno temprano con condición
        target n <= 1 craft hit
        PolloCrudo
            respawn 1;
        PolloAsado
        
        $$ Retorno con expresión compleja y llamada recursiva
        respawn n * factorial(n - 1);
    PolloAsado
    
    Spell esPar(Stack :: numero) -> Torch
    PolloCrudo
        target numero % 2 is 0 craft hit
        PolloCrudo
            respawn On;
        PolloAsado
        miss
        PolloCrudo
            respawn Off;
        PolloAsado
    PolloAsado
    
    Spell sumarArreglo(Shelf[10] Stack :: numeros; Stack tamano) -> Stack
    PolloCrudo
        Stack suma = 0;
        
        $$ Verificar parámetros
        target tamano <= 0 craft hit
        PolloCrudo
            respawn 0;  $$ Retorno temprano
        PolloAsado
        
        $$ Sumar elementos del arreglo
        walk i set 0 to tamano - 1 craft
        PolloCrudo
            suma += numeros[i];
        PolloAsado
        
        respawn suma;  $$ Retorno al final
    PolloAsado
    
    $$ Procedimientos (Ritual) con posibles retornos vacíos
    Ritual imprimirLinea(Spider :: texto)
    PolloCrudo
        dropperSpider(texto);
        dropperSpider("------------------------");
    PolloAsado
    
    Ritual mostrarResultado(Spider :: operacion; Stack valor)
    PolloCrudo
        dropperSpider(operacion bind ": " bind valor);
        
        $$ Retorno temprano sin valor
        target valor < 0 craft hit
        PolloCrudo
            dropperSpider("¡Valor negativo!");
            respawn;  $$ Retorno vacío temprano
        PolloAsado
        
        dropperSpider("Valor válido procesado");
    PolloAsado
    
    Ritual imprimirArreglo(Shelf[10] Stack :: arr; Stack tamano)
    PolloCrudo
        target tamano <= 0 craft hit
        PolloCrudo
            dropperSpider("Arreglo vacío");
            respawn;  $$ Retorno vacío temprano
        PolloAsado
        
        dropperSpider("Elementos del arreglo:");
        walk i set 0 to tamano - 1 craft
        PolloCrudo
            dropperStack(arr[i]);
        PolloAsado
    PolloAsado
}

$$ Punto de entrada con llamadas a funciones y procedimientos
SpawnPoint {
    PolloCrudo
        $$ Declaración de variables
        Stack a = 5;
        Stack b = 7;
        Stack resultado;
        Shelf[10] Stack numeros;
        
        $$ Inicializar arreglo
        walk i set 0 to 9 craft
        PolloCrudo
            numeros[i] = i + 1;
        PolloAsado
        
        $$ Llamadas a funciones (invocación directa)
        resultado = sumar(a, b);
        dropperSpider("Suma: " bind resultado);
        
        resultado = factorial(5);
        dropperSpider("Factorial de 5: " bind resultado);
        
        Torch esPar5 = esPar(5);
        dropperSpider("¿Es 5 par?: ");
        dropperTorch(esPar5);
        
        resultado = sumarArreglo(numeros, 10);
        dropperSpider("Suma del arreglo: " bind resultado);
        
        $ Llamadas a procedimientos
        imprimirLinea("==== Resultados de pruebas ====");
        
        mostrarResultado("Suma de 5 y 7", sumar(a, b));
        mostrarResultado("Valor negativo", -10);
        
        imprimirArreglo(numeros, 5);
        imprimirArreglo(numeros, 0);
    PolloAsado
}

worldSave