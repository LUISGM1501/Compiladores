$* 
  Prueba_PR_Operadores.ne
  Propósito: Verificar operadores textuales reales en Notch Engine
  Probar: soulsand, magma, and, or, not, xor, bind, #, from ##, except ##, seek,
          add, drop, feed, map, biom, void, isEngraved, isInscribed, etchUp, etchDown,
          unlock, lock, make, gather, forge, tag
  Fecha: 28/04/2025
*$

WorldName PruebaOperadores:

Inventory {
    Stack contador = 5; $$ Inicializa contador con 5
    Torch condicion1 = On; $$ Condición 1 es verdadera
    Torch condicion2 = Off; $$ Condición 2 es falsa
    Torch resultado; $$ Variable para almacenar resultados booleanos

    Spider texto1 = "Notch"; $$ Texto inicial "Notch"
    Spider texto2 = "Engine"; $$ Texto inicial "Engine"
    Spider textoCompleto; $$ Variable para texto combinado

    Rune letra = 'a'; $$ Letra inicial 'a'
    Rune letraMayuscula; $$ Variable para letra mayúscula

    Chest conjunto1 = {: 1, 2, 3 :}; $$ Conjunto inicial con 1, 2, 3
    Chest conjunto2 = {: 3, 4, 5 :}; $$ Conjunto inicial con 3, 4, 5
    Chest conjuntoResultado; $$ Variable para resultado de conjuntos

    Book archivo1 = {/ "datos.txt", 'E' /}; $$ Archivo para escritura "datos.txt"
    Book archivo2 = {/ "resultado.txt", 'E' /}; $$ Archivo para escritura "resultado.txt"

    Ghast flotante1 = 3.5; $$ Flotante inicial 3.5
    Ghast flotante2 = 2.5; $$ Flotante inicial 2.5
    Ghast resultadoFlotante; $$ Variable para resultado de operaciones flotantes
}

SpawnPoint {
PolloCrudo
    $$ soulsand y magma
    soulsand contador; $$ Aplica soulsand a contador
    magma contador; $$ Aplica magma a contador

    $$ and, or, not, xor
    resultado = condicion1 and condicion2; $$ Resultado es verdadero si ambas condiciones son verdaderas
    resultado = condicion1 or condicion2; $$ Resultado es verdadero si al menos una condición es verdadera
    resultado = not condicion1; $$ Resultado es el opuesto de condicion1
    resultado = condicion1 xor condicion2; $$ Resultado es verdadero si solo una condición es verdadera

    $$ bind, #, from ##, except ##, seek
    textoCompleto = bind(texto1, " " bind texto2); $$ Combina texto1 y texto2 con un espacio
    Stack longitud = #(textoCompleto); $$ Longitud de textoCompleto
    Spider subcadena = from textoCompleto ## 0 ## 5; $$ Subcadena de textoCompleto desde 0 hasta 5
    Spider sinNotch = except textoCompleto ## 0 ## 6; $$ Elimina caracteres de 0 a 6 en textoCompleto
    Stack posicion = seek(textoCompleto, "Engine"); $$ Posición de "Engine" en textoCompleto

    $$ isEngraved, isInscribed, etchUp, etchDown
    Torch esLetra = isEngraved(letra); $$ Verifica si letra es una letra
    Torch esDigito = isInscribed(letra); $$ Verifica si letra es un dígito
    letraMayuscula = etchUp(letra); $$ Convierte letra a mayúscula
    Rune letraMinuscula = etchDown(letraMayuscula); $$ Convierte letraMayuscula a minúscula

    $$ Operaciones de conjuntos
    add(conjunto1, 4); $$ Añade 4 a conjunto1
    drop(conjunto1, 2); $$ Elimina 2 de conjunto1
    conjuntoResultado = feed(conjunto1, conjunto2); $$ Intersección de conjunto1 y conjunto2
    resultado = map(conjunto1, 3); $$ Verifica si 3 está en conjunto1
    Torch conjuntoVacio = void(conjunto1); $$ Verifica si conjunto1 está vacío

    $$ Operaciones de archivos
    unlock(archivo1); $$ Abre archivo1 para escritura
    forge(archivo1, "Texto de prueba"); $$ Escribe "Texto de prueba" en archivo1
    lock(archivo1); $$ Cierra archivo1

    Book nuevoArchivo = make({/ "nuevo.txt", 'E' /}); $$ Crea nuevo archivo "nuevo.txt"
    forge(nuevoArchivo, "Contenido del nuevo archivo"); $$ Escribe en nuevoArchivo
    lock(nuevoArchivo); $$ Cierra nuevoArchivo

    unlock(archivo1); $$ Abre archivo1
    unlock(nuevoArchivo); $$ Abre nuevoArchivo
    tag(archivo1, nuevoArchivo); $$ Expande archivo1 con contenido de nuevoArchivo
    lock(archivo1); $$ Cierra archivo1
    lock(nuevoArchivo); $$ Cierra nuevoArchivo

    $$ Operadores de flotantes
    resultadoFlotante = flotante1 :+ flotante2; $$ Suma de flotante1 y flotante2
    resultadoFlotante = flotante1 :- flotante2; $$ Resta de flotante1 y flotante2
    resultadoFlotante = flotante1 :* flotante2; $$ Multiplicación de flotante1 y flotante2
    resultadoFlotante = flotante1 :// flotante2; $$ División de flotante1 y flotante2
    resultadoFlotante = flotante1 :% flotante2; $$ Módulo de flotante1 y flotante2
PolloAsado
}

worldSave