$* 
   Prueba: 43_Prueba_Rend_MuchosTokens
   Descripción: Verificar rendimiento con un archivo con miles de tokens
   Fecha: 28/04/2025
*$

WorldName PruebaMuchosTokens:

Bedrock
    Obsidian Stack MAX_ITERATIONS 1000;
    Obsidian Stack ARRAY_SIZE 500;
    Obsidian Stack STEP_VALUE 1;
    Obsidian Spider TEST_NAME "Prueba de rendimiento con muchos tokens";

ResourcePack
    Entity TestData
    PolloCrudo
        Stack id;
        Stack value;
        Ghast weight;
        Spider name;
        Torch active;
    PolloAsado;
Inventory
    $$ Declaramos variables extensas para generar muchos tokens
    Shelf[500] Stack numbers;
    
    $$ Creamos un array grande de registros
    Shelf[100] Entity TestData records;
    
    $$ Variables para el procesamiento
    Stack counter;
    Stack sum;
    Stack product;
    Stack max_value;
    Stack min_value;
    Ghast average;
    Stack i;
    Stack j;
    Stack k;
    Stack temp;
    Torch condition;

SpawnPoint
    dropperSpider(TEST_NAME);
    dropperSpider("Inicializando arrays...");
    
    $$ Inicialización masiva del array de enteros
    walk i set 0 to ARRAY_SIZE - 1 craft
    PolloCrudo
        numbers[i] = i * STEP_VALUE;
    PolloAsado
    
    $$ Inicialización del array de registros
    walk i set 0 to 99 craft
    PolloCrudo
        records[i]@id = i;
        records[i]@value = i * 10;
        records[i]@weight = i :* 0.5;
        records[i]@name = "Item_" bind i;
        records[i]@active = i % 2 is 0;
    PolloAsado
    
    dropperSpider("Realizando cálculos...");
    
    $$ Cálculos repetitivos generando miles de tokens
    sum = 0;
    product = 1;
    max_value = numbers[0];
    min_value = numbers[0];
    
    $$ Bucle con muchas operaciones
    walk i set 0 to ARRAY_SIZE - 1 craft
    PolloCrudo
        $$ Acumuladores simples
        sum += numbers[i];
        
        $$ Para evitar overflow, sólo multiplicamos los primeros 10 valores
        target i < 10 craft hit
        PolloCrudo
            product *= numbers[i] + 1;
        PolloAsado
        
        $$ Cálculo de máximo y mínimo
        target numbers[i] > max_value craft hit
        PolloCrudo
            max_value = numbers[i];
        PolloAsado
        
        target numbers[i] < min_value craft hit
        PolloCrudo
            min_value = numbers[i];
        PolloAsado
        
        $$ Operaciones condicionales adicionales
        target i % 50 is 0 craft hit
        PolloCrudo
            dropperSpider("Procesado " bind i bind " elementos...");
        PolloAsado
    PolloAsado
    
    $$ Cálculo de promedio
    average = sum >> Ghast :// (ARRAY_SIZE >> Ghast);
    
    dropperSpider("Procesamiento completado. Resultados:");
    dropperSpider("Suma total: " bind sum);
    dropperSpider("Producto (primeros 10): " bind product);
    dropperSpider("Valor máximo: " bind max_value);
    dropperSpider("Valor mínimo: " bind min_value);
    dropperSpider("Promedio: " bind average);
    
    $$ Procesamiento de registros - para generar más tokens
    dropperSpider("Procesando registros...");
    
    counter = 0;
    
    walk i set 0 to 99 craft
    PolloCrudo
        target records[i]@active craft hit
        PolloCrudo
            soulsand counter;
            
            $$ Actualizar el valor basado en otros registros
            walk j set 0 to i craft
            PolloCrudo
                records[i]@value += j;
            PolloAsado
        PolloAsado
    PolloAsado
    
    dropperSpider("Registros activos: " bind counter);
    
    $$ Algoritmo de ordenamiento burbuja para generar aún más tokens
    dropperSpider("Ordenando array...");
    
    walk i set 0 to ARRAY_SIZE - 2 craft
    PolloCrudo
        walk j set 0 to ARRAY_SIZE - i - 2 craft
        PolloCrudo
            target numbers[j] > numbers[j + 1] craft hit
            PolloCrudo
                $$ Intercambio
                temp = numbers[j];
                numbers[j] = numbers[j + 1];
                numbers[j + 1] = temp;
            PolloAsado
        PolloAsado
    PolloAsado
    
    dropperSpider("Array ordenado.");
    
    $$ Búsqueda binaria para generar más tokens
    dropperSpider("Realizando búsquedas...");
    
    walk k set 0 to 20 craft
    PolloCrudo
        Stack valor_buscar = k * 25;
        Stack inicio = 0;
        Stack fin = ARRAY_SIZE - 1;
        Stack medio;
        Stack encontrado = 0;
        
        repeater inicio <= fin craft
        PolloCrudo
            medio = (inicio + fin) // 2;
            
            target numbers[medio] is valor_buscar craft hit
            PolloCrudo
                encontrado = 1;
                creeper;
            PolloAsado
            
            target numbers[medio] < valor_buscar craft hit
            PolloCrudo
                inicio = medio + 1;
            PolloAsado
            miss
            PolloCrudo
                fin = medio - 1;
            PolloAsado
        PolloAsado
        
        target encontrado craft hit
        PolloCrudo
            dropperSpider("Valor " bind valor_buscar bind " encontrado en posición " bind medio);
        PolloAsado
        miss
        PolloCrudo
            dropperSpider("Valor " bind valor_buscar bind " no encontrado");
        PolloAsado
    PolloAsado
    
    dropperSpider("Prueba de rendimiento completada.");

worldSave
